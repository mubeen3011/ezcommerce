<?php

namespace backend\controllers;

use backend\util\DealsUtil;
use backend\util\HelpUtil;
use backend\util\InventoryUtil;
use backend\util\LazadaUtil;
use backend\util\ShopeeUtil;
use backend\util\ShopsUtil;
use common\models\Category;
use common\models\Channels;
use common\models\ChannelsCategoryMappings;
use common\models\ChannelsProducts;
use common\models\DealsMakerSkus;
use common\models\LazadaImporSkus;
use common\models\Notifications;
use common\models\PoDetails;
use common\models\ProductDetails;
use common\models\Products;
use common\models\Settings;
use common\models\Subsidy;
use common\models\UserRoles;
use Yii;
use common\models\DealsMaker;
use yii\filters\AccessControl;
use yii\helpers\Url;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * DealsMakerController implements the CRUD actions for DealsMaker model.
 */
class DealsMakerController extends GenericGridController
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all DealsMaker models.
     * @return mixed
     */
    public function actionIndex()
    {
        $DealsMakerChannels="SELECT c.id as `key`,c.name as `value` FROM deals_maker dm inner join channels c on c.id = dm.channel_id where c.is_active = 1 group by c.id";
        $ChannelList = DealsMaker::findBySql($DealsMakerChannels)->asArray()->all();

        $statuses = "SELECT dm.`status` as `key`, dm.`status` as `value` FROM deals_maker dm group by dm.`status`";
        $StatusesList = DealsMaker::findBySql($statuses)->asArray()->all();

        //echo $DealsMakerChannels;die;
        $config =
            ['UrlSetting'=>
                [
                    'defualtUrl' => '/deals-maker/generic-info',
                    'sortUrl' => '/deals-maker/generic-info-sort',
                    'filterUrl' => '/deals-maker/generic-info-filter',
                    'jsUrl'=>'/deals-maker/index',
                ],
                'thead'=>
                    [
                        'Name' => [
                            'data-field' => 'dm.name',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.name',
                            'data-filter-type' => 'like',
                            'label' => 'show',
                            'input-type' => 'text',
                            'input-type-class' => ''
                        ],
                        'Progress' => [
                            'data-field' => 'dm.overall_progress',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.overall_progress',
                            'data-filter-type' => 'operator',
                            'label' => 'show',
                            'input-type' => 'text',
                            'input-type-class' => ''
                        ],
                        'Shops' => [
                            'data-field' => 'c.id',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'c.id',
                            'data-filter-type' => 'operator',
                            'label' => 'show',
                            'input-type' => 'select',
                            'options' => $ChannelList,
                            'input-type-class' => ''
                        ],
                        'Requester' => [
                            'data-field' => 'u.full_name',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'u.full_name',
                            'label' => 'show',
                            'data-filter-type' => 'like',
                            'input-type' => 'hidden',
                            'input-type-class' => ''
                        ],
                        'Start Date' => [
                            'data-field' => 'dm.start_date',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.start_date',
                            'label' => 'show',
                            'data-filter-type' => 'between',
                            'input-type' => 'text',
                            'input-type-class' => 'mydatepicker'
                        ],
                        'End Date' => [
                            'data-field' => 'dm.end_date',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.end_date',
                            'label' => 'show',
                            'data-filter-type' => 'between',
                            'input-type' => 'text',
                            'input-type-class' => 'mydatepicker'
                        ],
                        'Approval' => [
                            'data-field' => 'dm.status',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.status',
                            'label' => 'show',
                            'data-filter-type' => 'like',
                            'input-type' => 'select',
                            'options' => $StatusesList,
                            'input-type-class' => ''
                        ]/*,
                        'Action' => [
                            'data-field' => 'dm.id',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.id',
                            'data-filter-type' => 'operator',
                            'label' => 'hidden',
                            'input-type' => 'hidden',
                            'input-type-class' => '',
                            'actions' => [
                                'edit' => '/deals-maker/update?'
                            ]
                        ]*/,
                        'Status ' => [
                            'data-field' => 'dm.id',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.id',
                            'data-filter-type' => 'operator',
                            'label' => 'hidden',
                            'input-type' => 'hidden',
                            'input-type-class' => ''
                        ]
                    ]
            ];
        $session = \Yii::$app->session;
        $officeSku = [];
        if ($session->has('sku-imported')) {
            $officeSku = $session->get('sku-imported');
        }
        $session->remove('sku-imported');
        $pdq = \Yii::$app->request->get('pdqs');
        $html = $this->renderAjax('../generic-grid/all', ['pdq' => $pdq, 'officeSku' => $officeSku,'config'=>$config]);
        //$html = "";
        $roleId = Yii::$app->user->identity->role_id;
        return $this->render('index',['gridview'=>$html,'roleId' => $roleId]);
    }

    public function actionDashboard()
    {
        $DealsMakerChannels="SELECT c.id as `key`,c.name as `value` FROM deals_maker dm inner join channels c on c.id = dm.channel_id where c.is_active = 1 group by c.id";
        $ChannelList = DealsMaker::findBySql($DealsMakerChannels)->asArray()->all();
        $config =
            ['UrlSetting'=>
                [
                    'defualtUrl' => '/deals-maker/generic-info',
                    'sortUrl' => '/deals-maker/generic-info-sort',
                    'filterUrl' => '/deals-maker/generic-info-filter',
                    'jsUrl'=>'/deals-maker/index',
                    'pageName'=>'ActiveDeals'
                ],
                'thead'=>
                    [
                        'Name' => [
                            'data-field' => 'dm.name',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.name',
                            'data-filter-type' => 'like',
                            'label' => 'show',
                            'input-type' => 'text',
                            'input-type-class' => ''
                        ],
                        'Progress' => [
                            'data-field' => 'dm.overall_progress',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.overall_progress',
                            'data-filter-type' => 'operator',
                            'label' => 'show',
                            'input-type' => 'text',
                            'input-type-class' => ''
                        ],
                        'Shops' => [
                            'data-field' => 'c.id',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'c.id',
                            'data-filter-type' => 'operator',
                            'label' => 'show',
                            'input-type' => 'select',
                            'options' => $ChannelList,
                            'input-type-class' => ''
                        ],
                        'Requester' => [
                            'data-field' => 'u.full_name',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'u.full_name',
                            'label' => 'show',
                            'data-filter-type' => 'like',
                            'input-type' => 'hidden',
                            'input-type-class' => ''
                        ],
                        'Start Date' => [
                            'data-field' => 'dm.start_date',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.start_date',
                            'label' => 'show',
                            'data-filter-type' => 'between',
                            'input-type' => 'text',
                            'input-type-class' => 'mydatepicker'
                        ],
                        'End Date' => [
                            'data-field' => 'dm.end_date',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.end_date',
                            'label' => 'show',
                            'data-filter-type' => 'between',
                            'input-type' => 'text',
                            'input-type-class' => 'mydatepicker'
                        ],
                        'Approval' => [
                            'data-field' => 'dm.status',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.status',
                            'label' => 'show',
                            'data-filter-type' => 'like',
                            'input-type' => 'hidden',
                            //'options' => $StatusesList,
                            'input-type-class' => ''
                        ],
                        'Status ' => [
                            'data-field' => 'dm.id',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.id',
                            'data-filter-type' => 'operator',
                            'label' => 'hidden',
                            'input-type' => 'hidden',
                            'input-type-class' => ''
                        ]
                    ]
            ];
        $session = \Yii::$app->session;
        $officeSku = [];
        if ($session->has('sku-imported')) {
            $officeSku = $session->get('sku-imported');
        }
        $session->remove('sku-imported');
        $pdq = \Yii::$app->request->get('pdqs');
        $html = $this->renderAjax('../generic-grid/all', ['pdq' => $pdq, 'officeSku' => $officeSku,'config'=>$config]);
        $roleId = Yii::$app->user->identity->role_id;
        return $this->render('dashboard',['gridview'=>$html,'roleId' => $roleId,'pdq' => $pdq, 'officeSku' => $officeSku,'config'=>$config]);
    }
    public function actionHistoricalDeals()
    {
        $DealsMakerChannels="SELECT c.id as `key`,c.name as `value` FROM deals_maker dm inner join channels c on c.id = dm.channel_id where c.is_active = 1 group by c.id";
        $ChannelList = DealsMaker::findBySql($DealsMakerChannels)->asArray()->all();

        $config =
            ['UrlSetting'=>
                [
                    'defualtUrl' => '/deals-maker/generic-info',
                    'sortUrl' => '/deals-maker/generic-info-sort',
                    'filterUrl' => '/deals-maker/generic-info-filter',
                    'jsUrl'=>'/deals-maker/index',
                    'pageName'=>'ExpiredDeals'
                ],
                'thead'=>
                    [
                        'Name' => [
                            'data-field' => 'dm.name',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.name',
                            'data-filter-type' => 'like',
                            'label' => 'show',
                            'input-type' => 'text',
                            'input-type-class' => ''
                        ],
                        'Performed' => [
                            'data-field' => 'dm.overall_progress',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.overall_progress',
                            'data-filter-type' => 'operator',
                            'label' => 'show',
                            'input-type' => 'text',
                            'input-type-class' => ''
                        ],
                        'Shops' => [
                            'data-field' => 'c.id',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'c.id',
                            'data-filter-type' => 'operator',
                            'label' => 'show',
                            'input-type' => 'select',
                            'options' => $ChannelList,
                            'input-type-class' => ''
                        ],
                        'Requester' => [
                            'data-field' => 'u.full_name',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'u.full_name',
                            'label' => 'show',
                            'data-filter-type' => 'like',
                            'input-type' => 'hidden',
                            'input-type-class' => ''
                        ],
                        'Start Date' => [
                            'data-field' => 'dm.start_date',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.start_date',
                            'label' => 'show',
                            'data-filter-type' => 'between',
                            'input-type' => 'text',
                            'input-type-class' => 'mydatepicker'
                        ],
                        'End Date' => [
                            'data-field' => 'dm.end_date',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.end_date',
                            'label' => 'show',
                            'data-filter-type' => 'between',
                            'input-type' => 'text',
                            'input-type-class' => 'mydatepicker'
                        ],
                        'Approval' => [
                            'data-field' => 'dm.status',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.status',
                            'label' => 'show',
                            'data-filter-type' => 'like',
                            'input-type' => 'hidden',
                            //'options' => $StatusesList,
                            'input-type-class' => ''
                        ],
                        'Status ' => [
                            'data-field' => 'dm.id',
                            'data-sort' => 'desc',
                            'data-filter-field' => 'dm.id',
                            'data-filter-type' => 'operator',
                            'label' => 'hidden',
                            'input-type' => 'hidden',
                            'input-type-class' => ''
                        ]
                    ]
            ];
        $session = \Yii::$app->session;
        $officeSku = [];
        if ($session->has('sku-imported')) {
            $officeSku = $session->get('sku-imported');
        }
        $session->remove('sku-imported');
        $pdq = \Yii::$app->request->get('pdqs');
        $html = $this->renderAjax('../generic-grid/all', ['pdq' => $pdq, 'officeSku' => $officeSku,'config'=>$config]);
        $roleId = Yii::$app->user->identity->role_id;
        return $this->render('expired_deals',['gridview'=>$html,'roleId' => $roleId]);
    }
    private function setHeader($Performance,$Category){
        $header = [];
        if ( $_GET['entitytype']=='sku' ){
            $header = [
                'Sku' => [
                    'data-field' => 'p.sku',
                    'data-sort' => 'desc',
                    'data-filter-field' => 'p.sku',
                    'label' => 'show',
                    'data-filter-type' => 'between',
                    'input-type' => 'hidden',
                    'input-type-class' => 'text'
                ],
                'Category' => [
                    'data-field' => 'c.id',
                    'data-sort' => 'desc',
                    'data-filter-field' => 'c.id',
                    'label' => 'show',
                    'data-filter-type' => 'operator',
                    'input-type' => 'select',
                    'options' => $Category,
                    'input-type-class' => 'text'
                ],
                'Date Range' => [
                    'data-field' => 'dm.start_date',
                    'data-sort' => 'desc',
                    'data-filter-field' => 'dm.start_date',
                    'label' => 'show',
                    'data-filter-type' => 'between',
                    'input-type' => 'text',
                    'input-type-class' => 'mydatepicker_range'
                ],
                'Performance' => [
                    'data-field' => 'overall_performance',
                    'data-sort' => 'desc',
                    'data-filter-field' => 'overall_performance',
                    'label' => 'show',
                    'data-filter-type' => 'operator',
                    'input-type' => 'select',
                    'options' => $Performance,
                    'input-type-class' => 'text'
                ]
            ];
        }
        elseif ( $_GET['entitytype'] == 'category' ){
            $header = [
                'Category' => [
                    'data-field' => 'c.id',
                    'data-sort' => 'desc',
                    'data-filter-field' => 'c.id',
                    'label' => 'show',
                    'data-filter-type' => 'operator',
                    'input-type' => 'select',
                    'options' => $Category,
                    'input-type-class' => 'text'
                ],
                'Performance' => [
                    'data-field' => 'overall_performance',
                    'data-sort' => 'desc',
                    'data-filter-field' => 'overall_performance',
                    'label' => 'show',
                    'data-filter-type' => 'operator',
                    'input-type' => 'select',
                    'options' => $Performance,
                    'input-type-class' => 'text'
                ]
            ];
        }
        elseif ( $_GET['entitytype'] == 'shop' ){
            $header = [
                'Shop' => [
                    'data-field' => 'chan.id',
                    'data-sort' => 'desc',
                    'data-filter-field' => 'chan.id',
                    'label' => 'show',
                    'data-filter-type' => 'operator',
                    'input-type' => 'hidden',
                    'input-type-class' => 'text'
                ],
                'Performance' => [
                    'data-field' => 'overall_performance',
                    'data-sort' => 'desc',
                    'data-filter-field' => 'overall_performance',
                    'label' => 'show',
                    'data-filter-type' => 'operator',
                    'input-type' => 'select',
                    'options' => $Performance,
                    'input-type-class' => 'text'
                ]
            ];
        }
        return $header;
    }
    public function actionSkuPerformance(){
        $Performance = [ 0 => ['key'=>'Top','value'=>'Top'], 1=>['key'=>'Medium','value'=>'Medium'], 2=>['key'=>'Low','value'=>'Low'] ];
        $category="SELECT c.id as `key`,c.name as `value` FROM category c";
        $categoryList = DealsMaker::findBySql($category)->asArray()->all();
        //$this->debug($Performance);
        $config =
            ['UrlSetting'=>
                [
                    'defualtUrl' => '/deals-maker/generic-info',
                    'sortUrl' => '/deals-maker/generic-info-sort',
                    'filterUrl' => '/deals-maker/generic-info-filter',
                    'jsUrl'=>'/deals-maker/index',
                    'pageName'=>'SkuPerformance',
                    'entitytype'=> (isset($_GET['entitytype'])) ? $_GET['entitytype'] : '' ,
                    'performance'=> (isset($_GET['performance'])) ? $_GET['performance'] : ''
                ],
                'thead'=> $this->setHeader($Performance,$categoryList)
            ];
        $session = \Yii::$app->session;
        $officeSku = [];
        if ($session->has('sku-imported')) {
            $officeSku = $session->get('sku-imported');
        }
        $session->remove('sku-imported');
        $pdq = \Yii::$app->request->get('pdqs');
        $html = $this->renderAjax('../generic-grid/all', ['pdq' => $pdq, 'officeSku' => $officeSku,'config'=>$config]);
        $roleId = Yii::$app->user->identity->role_id;
        return $this->render('expired_sku_stats',['gridview'=>$html,'roleId' => $roleId]);
    }
    public function actionConfigParams(){
        $cond = "";
        $data=\Yii::$app->request->post();
        $roleId = Yii::$app->user->identity->role_id;
        if(isset($_POST['pagename'])){
            if($_POST['pagename']=="ActiveDeals"){
                $condition=" AND dm.`status` IN ( 'active' )";
            }
            else if($_POST['pagename']=="ExpiredDeals"){
                $condition=" AND dm.`status` IN ( 'expired' )";
            }
            else if($_POST['pagename']=="SkuPerformance"){
                $cond = " AND dm.`status` IN ( 'expired' )";
                if ( $_POST['entitytype']=='sku' ){
                    $GroupBy = 'GROUP BY dms.sku_id ';
                    $Select = 'p.sku,c.name,dm.start_date,';
                }
                elseif ($_POST['entitytype'] == 'category'){
                    $GroupBy = 'GROUP BY c.id ';
                    $Select = 'c.name,';
                }
                elseif ( $_POST['entitytype'] == 'shop' ){
                    $GroupBy = 'GROUP BY chan.id ';
                    $Select = 'chan.name,';
                }

                $config=[
                    'query'=>[
                        'FirstQuery'=>'SELECT '.$Select.'
                                    (SUM(dms.`actual_sales`) / SUM(dms.`deal_target`)) * 100 AS overall_performance FROM `deals_maker_skus` dms
                                    INNER JOIN `deals_maker` dm ON
                                    dm.`id` = dms.`deals_maker_id`
                                    LEFT JOIN `products` p ON
                                    p.id = dms.sku_id
                                    LEFT JOIN `category` c ON
                                    c.id = p.sub_category 
                                    LEFT JOIN channels chan ON 
                                    chan.id = dm.channel_id
                                    WHERE 1=1 AND c.name != "" '.$cond.'',
                        'CountQuery'=>'SELECT COUNT(*) total_record FROM `deals_maker_skus` dms
                                    INNER JOIN `deals_maker` dm ON
                                    dm.`id` = dms.`deals_maker_id`
                                    LEFT JOIN `products` p ON
                                    p.id = dms.sku_id
                                    LEFT JOIN `category` c ON
                                    c.id = p.sub_category
                                    LEFT JOIN channels chan ON 
                                    chan.id = dm.channel_id
                                    WHERE 1=1 AND c.name != "" 
                                        '.$cond.'',
                        'GroupBy' => $GroupBy
                    ],
                    'OrderBy_Default'=>'ORDER BY overall_performance DESC',
                    'SortOrderByColumnAlias' => 'dms',
                ];
                return $config;
            }
            else{
                if ($roleId==1)
                    $condition=" AND dm.`status` IN ( 'new' , 'active','expired' )";
                else
                    $condition=" AND dm.`status` IN ( 'new' , 'active', 'draft','expired' )";
            }
        }
        else{
            if ($roleId==1)
                $condition=" AND dm.`status` IN ( 'new' , 'active','expired' )";
            else
                $condition=" AND dm.`status` IN ( 'new' , 'active', 'draft','expired' )";
        }
        $roles = ['1','7','6'];
        if (!in_array($roleId,$roles))
            $cond = " AND dm.requester_id = '".Yii::$app->user->id."'";
        // if( ( isset($data['filters'][4]) && ($data['filters'][4])!='' ) )
        //     $cond.='';
        // else
        $cond .= $condition;

        $config=[
            'query'=>[
                'FirstQuery'=>'SELECT dm.name AS name, dm.overall_progress, c.name AS channel, u.full_name AS Requester,dm.start_date, dm.end_date, dm.`status`,dm.id as dm_id FROM deals_maker dm inner join channels c on c.id = dm.channel_id inner join `user` u on u.id = dm.requester_id where 1=1  '.$cond.'','GroupBy' => '',
                'CountQuery'=>'SELECT count(*) as total_record FROM deals_maker dm inner join channels c on c.id = dm.channel_id inner join `user` u on u.id = dm.requester_id where 1=1  '.$cond.'',
            ],
            'OrderBy_Default'=>'ORDER BY dm.start_date DESC , dm.`status` ASC',
            'SortOrderByColumnAlias' => 'dm',
        ];
        return $config;
    }


    public function actionUpdateAutoDeal(){
        //check active deals
        $deal_start_date = date("Y-m-d H:i:s",strtotime("+15 minutes"));
        $count = 0;
        $currentDate = date('Y-m-d');
        $dmList = DealsUtil::getPossibleSalePrices();
        $currentDateSub = date("Y-m-d");
        $nextDateSub = date("Y-m-d", strtotime("+1 day"));
        foreach ($dmList as $l) {
            $refineDmList[$l['sugguested_shop_id']][] = $l;
        }
        foreach ($refineDmList as $ch => $list) {
            foreach ($list as $l) {
                $skuList = HelpUtil::getSkuList('sku');
                $skuId = $skuList[$l['sku']];
                $subsidy = Subsidy::find()->where(['channel_id' => $ch])->andWhere(['sku_id' => $skuId])->one();
                if($subsidy)
                {
                    $subsidy->ao_margins = $l['margin_at_sp'];
                    $subsidy->start_date = $currentDateSub;
                    $subsidy->end_date = $nextDateSub;
                    $subsidy->save(false);

                } else {
                    $subsidy = new Subsidy();
                    $subsidy->ao_margins = $l['margin_at_sp'];
                    $subsidy->channel_id = $ch;
                    $subsidy->subsidy = '0';
                    $subsidy->margins = '5';
                    $subsidy->sku_id = $skuId;
                    $subsidy->updated_by = '1';
                    $subsidy->start_date = $currentDateSub;
                    $subsidy->end_date = $nextDateSub;
                    $subsidy->save(false);

                }
            }
        }
        DealsMaker::updateAll(['status' => 'active','start_date'=>$deal_start_date], 'id = '.$_GET['deal_id']);
        DealsMakerSkus::updateAll(['status' => 'Approved'], 'deals_maker_id = '.$_GET['deal_id']);
        return $this->redirect('/deals-maker');
    }
    /**
     * Creates a new DealsMaker model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        return $this->actionRequest();
    }

    public function actionRequest()
    {
        //print_r(implode(',',$_POST['DealsMaker']['category'])); die();

        $model = new DealsMaker();
        $model->requester_id = Yii::$app->user->id;
        $multiSkus = [];
        //$this->debug($_POST);
        if ($model->load(Yii::$app->request->post())) {
            /*if ((isset($_POST['save_as_draft']) && $_POST['save_as_draft']=='true' )){
                echo 'Draft';
            }else{
                echo 'New';
            }*/

            $updateDeal = new DealsMaker();
            $updateDeal->name = $_POST['DealsMaker']['name'];
            $updateDeal->status= (isset($_POST['save_as_draft']) && $_POST['save_as_draft']=='true' ) ? 'draft' : 'new';
            $updateDeal->channel_id = $_POST['DealsMaker']['channel_id'];
            $updateDeal->requester_id = Yii::$app->user->getId();
            $updateDeal->start_date = $_POST['DealsMaker']['start_date'];
            $updateDeal->customer_type = (isset($_POST['DealsMaker']['customer_type']) && $_POST['DealsMaker']['customer_type']!= null) ?$_POST['DealsMaker']['customer_type'] : 'B2C';
            $updateDeal->end_date = $_POST['DealsMaker']['end_date'];
            $updateDeal->created_by = Yii::$app->user->getId();
            $updateDeal->updated_at = Yii::$app->user->getId();
            $updateDeal->motivation = $_POST['DealsMaker']['motivation'];
            $updateDeal->discount_type = $_POST['DealsMaker']['discount_type'];
            $updateDeal->discount = $_POST['DealsMaker']['discount'];
            $updateDeal->pre_approve = $_POST['DealsMaker']['pre_approve'];
            $updateDeal->category = (($_POST['DealsMaker']['category'])!='') ? implode(',',$_POST['DealsMaker']['category']) : '';
            if ( isset($_POST['DealsMaker']['setting']) ){
                $updateDeal->extra_params = json_encode($_POST['DealsMaker']['setting']);
            }

            $updateDeal->save();

            //$this->debug($_POST['DM']);
            if (isset($_POST['DM'])){
                foreach ( $_POST['DM'] as $key=>$skuDetail ){
                    //$this->debug($skuDetail);
                    $splitSku = explode('_',$key);
                    $skuId = $splitSku[1];

                    $findSku = new DealsMakerSkus();
                    $findSku->sku_id=$skuId;
                    $findSku->sku = $skuDetail['sku'];
                    $findSku->deals_maker_id = $updateDeal->id;
                    $findSku->deal_price = $skuDetail['price'];
                    $findSku->total_stocks = $skuDetail['stock'];
                    $findSku->form_cat = (isset($skuDetail['form_cat'])) ? $skuDetail['form_cat'] : null;
                    $findSku->deal_subsidy = $skuDetail['subsidy'];
                    $findSku->deal_target = $skuDetail['qty'];
                    $findSku->deal_margin=(double) $skuDetail['margin_per'];
                    $findSku->deal_margin_rm=(double) str_replace(',','',$skuDetail['margin_rm']);
                    $findSku->requestor_reason=$skuDetail['reason'];
                    $skuStatus = 'Pending';
                    $autoApprov='';
                    $findSku->status=$skuStatus;
                    $findSku->approval_comments=(isset($skuDetail['comments']) && $skuDetail['comments']!='') ? $skuDetail['comments'] : $autoApprov;
                    $findSku->save();

                }
                DealsUtil::AutoApproveDealSku($updateDeal->id);
            }
            else if ( isset($_FILES['deals_csv_import']['name']) && $_FILES['deals_csv_import']['tmp_name']!='' )
            {
                $Response=$this->DealsCsvImporter($updateDeal->id);
                DealsUtil::AutoApproveDealSku($updateDeal->id);
                Yii::$app->session->setFlash('DealCsvImport', $Response);
            }
            //$this->debug($_POST);
            return $this->redirect('/deals-maker/update?id='.$updateDeal->id);

        }else {
            $dd_categories=Category::find()->where(['is_active'=>1])->asArray()->all();
            $dd_categories=\backend\util\HelpUtil::make_child_parent_tree($dd_categories);
            $categories =\backend\util\HelpUtil::dropdown_3_level($dd_categories);
            return $this->render('create', [
                'model' => $model,
                'multiSkus' => $multiSkus,
                'category_list'=>$categories
            ]);
        }


    }
    private function DealsCsvImporter($Deal_Id)
    {
        if (($handle = fopen($_FILES['deals_csv_import']['tmp_name'], "r")) !== FALSE) {
            $ImportSummary = [];
            $counter = 0;
            while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
                //$this->debug($data);
                // below condition validates the csv columns
                if ($counter == 0) {
                    $this->ValidateDealsCSVColumns($data);
                    $counter++;
                }
                if ($data[0] == 'sku')
                    continue;
                if (!array_filter($data)) {
                    continue;
                }

                //$this->debug($data);
                $skuInfo = [];
                $skuInfo['sku'] = $data[0];
                $skuInfo['price'] = (double)str_replace( ',', '', $data[1]);
                $skuInfo['qty'] = $data[2];
                $skuInfo['subsidy'] = $data[3];

                $Response = $this->actionImportDealSku($skuInfo, $Deal_Id);
              //  $this->debug($Response);
                if (isset($Response['AlreadyExistInDeal'])) {
                    $ImportSummary['AlreadyExistInDeal'][] = $Response['AlreadyExistInDeal'];
                } else if (isset($Response['SkuNotFoundInEzCommerce'])) {
                    $ImportSummary['SkuNotFoundInEzCommerce'][] = $Response['SkuNotFoundInEzCommerce'];
                } elseif (isset($Response['DbErrors'])) {
                    $ImportSummary['DbErrors'][] = $Response['DbErrors'];
                } elseif (isset($Response['SuccessFullyAdded'])) {
                    $ImportSummary['SuccessFullyAdded'][] = $Response['SuccessFullyAdded'];
                } elseif (isset($Response['SuccessFullyUpdated'])) {
                    $ImportSummary['SuccessFullyUpdated'][] = $Response['SuccessFullyUpdated'];
                } else if (isset($Response['ErrorInGettingMargin'])) {
                    $ImportSummary['ErrorInGettingMargin'][] = $Response['ErrorInGettingMargin'];
                    //$this->debug($ImportSummary['ErrorInGettingMargin']);
                }

            }
            fclose($handle);
            $SummaryMessage = DealsUtil::setDealImportSummaryMessage($ImportSummary);
            return $SummaryMessage;
        }
    }
    private function DoubleCheckDealSkuMargins($Deal_Id){
        $get_skus = DealsMaker::getSkus($Deal_Id);
        foreach ($get_skus as $value){
            $update_sku = DealsMakerSkus::findOne($value['id']);
            $update_sku->status = '';
            $update_sku->update();
        }
    }
    private function ValidateDealsCSVColumns($data){
        if ( $data[0]!='sku' || $data[1]!='price' || $data[2]!='qty' || $data[3]!='subsidy' )
        {
            echo '<h2>Csv column names are not exactly the same as given in sample. Please re-arrange it and upload CSV again</h2>';
            die;
        }
    }
    /**
     * Updates an existing DealsMaker model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {

       //$this->debug($_POST);
        $deal_margin = "";
        $roleId = Yii::$app->user->identity->role_id;
       // $this->debug(Yii::$app->user);
        $notif = Notifications::find()->where(['like', 'message', '%' . $id . '%', false])->all();
        //echo $status;die;
        //$this->debug($_POST);

        if ( isset($_POST['cancel_deal']) && $_POST['cancel_deal']=='cancel_deal' ) {
            $_POST['save_as_draft'] = 'cancel';
        }
        foreach ($notif as $n) {
            $n->is_read = '1';
            $n->save();
        }
        $model = $this->findModel($id);
        //$this->debug($model);
        $multiSkus = $model->requestedSkus;
        //$this->debug($multiSkus);
        //unset($model->skus);
        if ($model->load(Yii::$app->request->post())) {
            if ( isset($_FILES['deals_csv_import']['name']) && $_FILES['deals_csv_import']['tmp_name']!='' ) {
                $model->noAuto=false;
                $Response=$this->DealsCsvImporter($model->id);
                DealsUtil::AutoApproveDealSku($model->id);
                Yii::$app->session->setFlash('DealCsvImport', $Response);
                return $this->redirect(['/deals-maker/update?id='.$id]);
            }
            //$model->status = $_POST['save_as_draft'];
            $multiSkus = $_POST['DM'];

            $model->requestedSkus = $multiSkus;

            $updateDeal = DealsMaker::findOne($id);
           // $this->debug($updateDeal);
            $updateDeal->status= (isset($_POST['save_as_draft']) && $_POST['save_as_draft']=='true') ? 'draft' : 'new';
            if ( isset($_POST['DealsMaker']['start_date']) )
                $updateDeal->start_date = $_POST['DealsMaker']['start_date'];
            if (isset($_POST['DealsMaker']['end_date']))
                $updateDeal->end_date = $_POST['DealsMaker']['end_date'];
            if ( isset($_POST['DealsMaker']['motivation']) )
                $updateDeal->motivation = $_POST['DealsMaker']['motivation'];
            if ( isset($_POST['DealsMaker']['discount_type']) )
                $updateDeal->discount_type = $_POST['DealsMaker']['discount_type'];
            if ( isset($_POST['DealsMaker']['discount']) )
                $updateDeal->discount = $_POST['DealsMaker']['discount'];
            $updateDeal->pre_approve = $_POST['DealsMaker']['pre_approve'];
            if ( isset($_POST['DealsMaker']['category']) )
                $updateDeal->category = ($_POST['DealsMaker']['category']!='') ? implode(',',$_POST['DealsMaker']['category']) : '';
           // $this->debug($updateDeal->category); die();
            $updateDeal->save();
            //$this->debug($_POST);
            //DealsMakerSkus::deleteAll(['deals_maker_id'=>$id]);
            $dealSkus= DealsMakerSkus::find()->where(['deals_maker_id'=>$id])->asArray()->all();
            $alreadyAddedSkus=[];
            foreach ( $dealSkus as $dmDetail ){
                $alreadyAddedSkus[] = $dmDetail['sku_id'];
            }
            $alreadyAddedSkus = array_flip($alreadyAddedSkus);
            //$this->debug($alreadyAddedSkus);
            foreach ( $_POST['DM'] as $key=>$skuDetail ){
                //$this->debug($skuDetail);

                $splitSku = explode('_',$key);

                $skuId = $splitSku[1];
                unset($alreadyAddedSkus[$skuId]);
                //$this->debug($skuId);
                //$skuSplit =
                $findSkuInDeal = DealsMakerSkus::find()->where(['deals_maker_id'=>$id,'sku_id'=>$skuId])->one();
                if ( !$findSkuInDeal )
                    $findSkuInDeal = new DealsMakerSkus();

                $findSkuInDeal->sku_id=$skuId;
                $findSkuInDeal->sku = $skuDetail['sku'];
                $findSkuInDeal->deals_maker_id = $id;
                $findSkuInDeal->total_stocks = (isset($skuDetail['stock'])) ? $skuDetail['stock'] : '';
                $findSkuInDeal->deal_price = $skuDetail['price'];
                $findSkuInDeal->deal_subsidy = $skuDetail['subsidy'];
                $findSkuInDeal->deal_target = $skuDetail['qty'];
                $findSkuInDeal->deal_margin=(double) $skuDetail['margin_per'];
                $findSkuInDeal->deal_margin_rm=(double) str_replace(',','',$skuDetail['margin_rm']);
                $findSkuInDeal->requestor_reason=$skuDetail['reason'];
                $autoApprov='';
                if ( isset($skuDetail['status']) ){ // only admin will have this status when he approves
                    $skuStatus = $skuDetail['status'];
                    $findSkuInDeal->approval_id = Yii::$app->user->getId();
                }else{
                    $skuStatus = 'Pending';
                    $autoApprov = '';
                }
                $findSkuInDeal->status=trim($skuStatus);
                $findSkuInDeal->approval_comments=(isset($skuDetail['comments']) && $skuDetail['comments']!='') ? $skuDetail['comments'] : $autoApprov;
               // $this->debug($findSkuInDeal);
                $findSkuInDeal->save();

            }
            //echo $id; die();
            if($roleId!==1)
                DealsUtil::AutoApproveDealSku($id);

            if ($alreadyAddedSkus){
                foreach ($alreadyAddedSkus as $skuiddel=>$val){
                    DealsMakerSkus::deleteAll(['sku_id'=>$skuiddel,'deals_maker_id'=>$id]);
                }
            }
          //  die();
            //$this->debug($alreadyAddedSkus);
            //die;
            //if ( $model->validate() && $model->save() ) {

            return $this->redirect(['/deals-maker/update?id='.$id]);
            //}
        }

        /*if ($roleId != '7' && $roleId != '1' && $model->pre_approve == 1)
            $view = '_pre_form';*/
         if ( $roleId != '1')
            $view = '_form';
        else {
            $access = UserRoles::find()->where(['id' => $roleId])->one();
            $deal_margin = $access->margin_limit;
            $view = '_approval_form';
        }
        $addiontional_sku_form = $this->getAdditionalSkusform($id);
        $skusInDeal = $this->getSkusFromData($multiSkus);
        $channelSku = $this->GetChannelSkus($model->channel_id,$skusInDeal);
           /// echo $view; die();
        return $this->render('update', [
            'model' => $model, 'multiSkus' => $multiSkus, 'view' => $view, 'deal_margin' => $deal_margin, 'channelSku'=>$channelSku,'additional_sku'=>$addiontional_sku_form
        ]);
    }
    public function getAdditionalSkusform($id){
        $skuslist= DealsMakerSkus::find()->where(['deals_maker_id'=>$id,'form_cat'=>null])->asArray()->all();
        $list=[];
        foreach ( $skuslist as $val ){
            $list[] = $val['sku_id'];
        }
        return $list;
    }
    public function getSkusFromData($data){
        $skulist=[];
        foreach ( $data as $key=>$value ){
            $skulist[] = $value['sku'];
        }
        return $skulist;
    }
    public function actionView($id)
    {
        $deal_margin = "";
        $model = $this->findModel($id);
        $multiSkus = $model->requestedSkus;
        $view = '_view';
        return $this->render($view, [
            'model' => $model, 'multiSkus' => $multiSkus, 'view' => $view , 'deal_margin'=>$deal_margin
        ]);
    }

    public function actionDuplicateDeal(){
        $oldDealId =  \Yii::$app->request->post('oldDealId');
        $newDealName =  \Yii::$app->request->post('newDealName');
        $newDealStartDate =  \Yii::$app->request->post('newDealStartDate');
        $newDealEndDate =  \Yii::$app->request->post('newDealEndDate');

        // create duplicate deal
        $oldDealModel = self::findModel((int)$oldDealId);
        if(isset($oldDealModel)){

            $model = new DealsMaker();
            $model->name = $newDealName;
            $model->channel_id = $oldDealModel->channel_id;
            $model->requester_id = Yii::$app->user->id;
            $model->created_by = Yii::$app->user->id;
            $model->motivation = $oldDealModel->motivation;
            $model->status = "draft";
            $model->start_date = $newDealStartDate;
            $model->end_date = $newDealEndDate;
            $model->requestedSkus = $oldDealModel->requestedSkus;

            // Declare and define two dates
            $oldDealStartDate = strtotime($oldDealModel->start_date);
            $newDealStartDate = strtotime($newDealStartDate);

            // Formulate the Difference between two dates
            $diff = abs($newDealStartDate - $oldDealStartDate);
            $days = round($diff / (60 * 60 * 24));
            //$years = floor($diff / (365*60*60*24));
            //$months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
            if($days>30)
                $model->isAutoDuplicate = false;
            else
                $model->isAutoDuplicate =true;
            $model->isDuplicateDeal = true;
            if ($model->validate() && $model->save()) {
                //echo "saved";
            }else{
                //echo $model->errors;
            }
        }
        if (isset($model->id)){
            $oldDealSkus = DealsMakerSkus::find()->where(['deals_maker_id'=>$oldDealId])->asArray()->all();
            foreach ( $oldDealSkus as $skusDetail )
            {
                $findSkuInDeal = DealsMakerSkus::find()->where(['sku_id'=>$skusDetail['sku_id'],'deals_maker_id'=>$model->id])->one();
                if ( !$findSkuInDeal ){
                    $_POST['sku_id'] = $skusDetail['sku_id'];
                    $dealpricing = self::CalculateDealPricing($_POST['sku_id'],$oldDealModel->channel_id,$skusDetail['deal_price'],$skusDetail['deal_subsidy'],$skusDetail['deal_target'],true);
                    if ($this->isJson($dealpricing)){
                        $dealpricing = json_decode($dealpricing,true);

                        // create sku in deal
                        $addSkuInDeal = new DealsMakerSkus();
                        $addSkuInDeal->sku_id = $skusDetail['sku_id'];
                        $addSkuInDeal->sku=$skusDetail['sku'];
                        $addSkuInDeal->deals_maker_id = $model->id;
                        $addSkuInDeal->deal_price = $skusDetail['deal_price'];
                        $addSkuInDeal->deal_subsidy = $skusDetail['deal_subsidy'];
                        $addSkuInDeal->deal_target = $skusDetail['deal_target'];
                        $addSkuInDeal->deal_margin = $dealpricing['sales_margins'];
                        $addSkuInDeal->deal_margin_rm = $dealpricing['sales_margins_rm'];
                        $addSkuInDeal->total_stocks = (string)$dealpricing['stocks']['total_stocks'];
                        $addSkuInDeal->requestor_reason = 'Others';
                        if ( $dealpricing['sales_margins'] == 5 || $dealpricing['sales_margins'] > 5 ){
                            $addSkuInDeal->status = 'Approved';
                            $addSkuInDeal->approval_comments = 'auto approve by system';
                        }
                        else
                        {
                            $addSkuInDeal->status = 'Pending';
                        }
                        $addSkuInDeal->created_at = time();
                        $addSkuInDeal->updated_at = time();
                        $addSkuInDeal->created_by = Yii::$app->user->getId();
                        $addSkuInDeal->created_by = Yii::$app->user->getId();
                        $addSkuInDeal->save();
                        if ($addSkuInDeal->errors){
                            $this->debug($addSkuInDeal->errors);
                        }
                    }
                }
            }
        }
        $response = [];
        if (isset($model->id)){
            $response['status'] = 1;
            $response['deal_id'] = $model->id;
        }else{
            $response['status'] = 0;
        }
        return json_encode($response);
    }
    /**
     * Deletes an existing DealsMaker model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the DealsMaker model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return DealsMaker the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = DealsMaker::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }

    public function GetSkusIds(){
        $getDealsMakerSkus=DealsMaker::getDealsmakerSkus();
        return $getDealsMakerSkus;
    }

    public function GetChannelsIds(){
        $getChannels = Channels::getChannelsDealsMaker();
        return $getChannels;
    }

    public function getDealsMakerStatuses(){
        $getDealsMakerStatuses = DealsMaker::getDealsMakerStatuses();
        return $getDealsMakerStatuses;
    }

    public function dealDetailFilters(){
        $cond = '';
        if ( isset($_GET['sku']) && $_GET['sku']!='' )
            $cond .= ' AND sku  = "'.$_GET['sku'].'"';
        if ( isset($_GET['shop']) && $_GET['shop']!='' )
            $cond .= ' AND dm.channel_id = '.$_GET['shop'];
        if ( isset($_GET['deal_name']) && $_GET['deal_name']!='' )
            $cond .= ' AND dm.`name` like "%'.$_GET['deal_name'].'%"';
        if ( isset($_GET['deal_price']) && $_GET['deal_price']!='' )
            $cond .= ' AND deal_price '.$_GET['deal_price'];
        if ( isset($_GET['lowest_price']) && $_GET['lowest_price']!='' )
            $cond .= ' AND cp.`low_price` '.$_GET['lowest_price'];
        if ( isset($_GET['margins_percentage']) && $_GET['margins_percentage']!='' )
            $cond .= ' AND deal_margin '.$_GET['margins_percentage'];
        if ( isset($_GET['status']) && $_GET['status']!='' )
            $cond .= ' AND dms.`status` ="'.$_GET['status'].'"';
        if ( isset($_GET['margins_rm']) && $_GET['margins_rm']!='' )
            $cond .= ' AND dms.`deal_margin_rm` '.$_GET['margins_rm'].'';
        if ( isset($_GET['start_date']) && $_GET['start_date']!='' ){
            $date=date_create($_GET['start_date']);
            $ModifyDateFormat = date_format($date,"Y-m-d");
            $cond .= ' AND dm.start_date BETWEEN "'.$ModifyDateFormat.' 00:00:00" AND "'.$ModifyDateFormat.' 23:59:59"';
        }
        if ( isset($_GET['end_date']) && $_GET['end_date']!='' ){
            $date=date_create($_GET['end_date']);
            $ModifyDateFormat = date_format($date,"Y-m-d");
            $cond .= ' AND dm.end_date BETWEEN "'.$ModifyDateFormat.' 00:00:00" AND "'.$ModifyDateFormat.' 23:59:59"';
        }
        if (isset($_GET['deal_status']) && $_GET['deal_status']!='')
            $cond .= ' AND dm.`status` = "'.$_GET['deal_status'].'"';

        //margins_rm

        return $cond;
    }

    public function actionDetail()
    {
        $filterSkuIds=$this->GetSkusIds();

        $filterChannels=$this->GetChannelsIds();

        $filterStatuses = $this->getDealsMakerStatuses();

        $cond = $this->dealDetailFilters();

        $skus = \backend\util\HelpUtil::getRequesterDealCount(null,true,true,$cond);
        //$this->debug($skus);
        return $this->render('detail', [
            'skus' => $skus['result'],
            'total_records' => $skus['total_records'],
            'filterSkuIds' => $filterSkuIds,
            'filterChannels' => $filterChannels,
            'filterStatuses' => $filterStatuses
        ]);

    }

    public function actionSkuMarginsDefinition()
    {
        $skus = HelpUtil::getSkuMarginsDefinition();
        return $this->render('sku_margins_definition', [
            'skus' => $skus
        ]);

    }

    public function actionCategoryMapping()
    {
        $cat = ChannelsCategoryMappings::find()->joinWith('channel')->where(['is_active'=>1])->orderBy(['channels.marketplace'=>SORT_DESC])->all();
        return $this->render('category_mapping', [
            'cat' => $cat
        ]);

    }

    public function actionCategoryMappingUpdateOthers(){
        $update_cat_mapping=ChannelsCategoryMappings::findOne(['channel_id'=>$_GET['channel_id']]);
        $update_cat_mapping->others=$_GET['others'];
        $update_cat_mapping->update();
        if (empty($update_cat_mapping->errors))
            return 1;
        else
            return 0;
    }

    public function actionCalculate()
    {   //$this->debug($_POST);

        if ($_SERVER['SERVER_NAME']=='philips.ezcommerce.io') // only for philips
        {
            return self::actionCalculatePhilips();
        }else{
            //$this->debug(self::CalculateDealPricing());
            $skuId = $_POST['sku_id'];
            $channelId = $_POST['channel'];
            $price = $_POST['price'];
            $subsidy = $_POST['subsidy'];
            $qty = $_POST['qty'];
            $calculate_in_form = $_POST['calculate_in_form'];
            return self::CalculateDealPricing($skuId, $channelId, $price, $subsidy, $qty,$calculate_in_form);
        }


        //echo '{"low_price":222,"cost":22.66,"extra_cost":"0.00","actual_cost":"22.66","sku_cost":"22.66","pg_commission":"0 %","commission_org":"7.42 %","commission":"7.42 %","shipping":3.54,"margins":"5","margins_":"5","gross_profit":"201.99","sales_margins":"88.78%","sales_margins_rm":"RM 179.33","sales_margins_qty_rm":"RM 0","price_after_subsidy":222,"subsidy":0,"sales_price":"222.50","customer_pays":"RM 222","stocks":{"current_stocks":"0","office_stocks":"0","isis_stocks":"0","fbl_stock":"0","fbl_99_stock":"0","fbl_d4u_stock":"0","fbl_pavent_stock":"0"}}';
    }
    public function CalculateDealPricing($skuId, $channelId, $price, $subsidy, $qty, $calculate_in_form){

        $product = Products::find()->where(['id'=>$skuId])->all();
        $cost_price = $product[0]['cost']; // get the cost price of product
        $extra_cost = $product[0]['extra_cost'];



        // get the channel commission, payment gateway & shipping
        $getCharges = DealsUtil::catChildParent($channelId,$product[0]['sub_category']);
        if ( $getCharges==NULL ){
            $channelCharges = [
                'shipping_fee'=>0,
                'commission'=>0,
                'pg_commission'=>0,
            ];
        }else{
            $channelCharges = $getCharges;
        }


        // without subsidy
        if ( $subsidy){
            $lowPrice = (($price * $subsidy) / 100) + $price;
            $dt = [
                'low_price'=> (($price * $subsidy) / 100) + $price,
                'commission'=>(double)$channelCharges['commission'] + (double) $channelCharges['pg_commission'],
                'shipping'=>(double)$channelCharges['shipping_fee'],
                'cost'=>(double)$product[0]['cost'] + $extra_cost
            ];

            $margin_money =  HelpUtil::_formulaG($dt);
            $margin_percentage = ($margin_money / $lowPrice) * 100;
        }
        else{
            $lowPrice = $price;
            $dt = [
                'low_price'=> $price,
                'commission'=>(double)$channelCharges['commission']  + (double) $channelCharges['pg_commission'],
                'shipping'=>(double)$channelCharges['shipping_fee'],
                'cost'=>(double)$product[0]['cost'] + $extra_cost
            ];
          //  echo "<pre>";
           // print_r($dt); die();
            $margin_money =  HelpUtil::_formulaG($dt);
            $margin_percentage = ($margin_money/$price) * 100;
        }


        $data =
            [
                'low_price'=>$lowPrice,
                'cost' => $product[0]['cost'],
                'extra_cost' => $product[0]['extra_cost'],
                'actual_cost'=>$product[0]['cost'],
                "sku_cost"=>$product[0]['cost'],
                "sku" => $product[0]['sku'],
                "pg_commission"=>$channelCharges['pg_commission'].' %',
                "commission_org"=>$channelCharges['commission'].' %',
                "commission"=>$channelCharges['commission'].' %',
                "shipping"=>isset($channelCharges['shipping_fee']) ? $channelCharges['shipping_fee'] : '',
                "margins"=>"0",
                "margins_"=>"0",
                "gross_profit"=>$price,
                "sales_margins"=>number_format($margin_percentage,2),
                "sales_margins_rm"=>number_format($margin_money,2),
                "sales_margins_qty_rm"=>$margin_money * (integer)$qty,
                "price_after_subsidy"=>number_format($cost_price,2,'.',''),
                "subsidy"=>$subsidy,
                "sales_price"=>$price,
                "customer_pays"=>$price,
                "stocks" => InventoryUtil::get_stock_by_product_id($product[0]['sku'],$channelId)
            ];
        //$this->debug($data);
        if ( $calculate_in_form ){
            return json_encode($data);
        }else{
            $html = [];
            //$this->debug($data);
            $html['content'] = $this->renderPartial('_deal-render-partials/calculate',['data'=>$data,'skuId'=>$_POST['sku_id']]);
            return json_encode($html);
        }
    }
    public static function actionCalculatePhilips(){

        $params['sku_id'] = $_POST['sku_id'];
        $params['channel_id'] = $_POST['channel'];
        $params['price_sell'] = $_POST['price'];
        $params['subsidy'] = $_POST['subsidy'];
        $params['qty'] = $_POST['qty'];

        $is_fbl = 0;
        // calculate shipping cost and get fbl
        $stock = HelpUtil::getFblStock($params['sku_id'],$params['channel_id']);
        if($stock > 0 && $stock >= $params['qty'])
        {
            $is_fbl = 1;
        }
        $params['fbl'] = $is_fbl;
        $values = HelpUtil::getSkuInfo($params,$isCheckCostPrice = true,true);


        return json_encode($values);

    }
    public function actionCalculateBulk()
    {

        $params['sku_id'] = $_POST['sku_id'];
        $params['channel_id'] = $_POST['channel'];
        $params['price_sell'] = $_POST['price'];

        $params['subsidy'] = $_POST['subsidy'];
        $params['qty'] = $_POST['qty'];

        $is_fbl = 0;
        // calculate shipping cost and get fbl
        $stock = HelpUtil::getFblStock($params['sku_id'],$params['channel_id']);
        if($stock > 0 && $stock >= $params['qty'])
        {
            $is_fbl = 1;
        }
        $params['fbl'] = $is_fbl;

        $values = HelpUtil::getSkuInfo($params,$isCheckCostPrice = true,true);

        return json_encode($values);
    }

    public function actionUpdateDealBudget()
    {
        $dealId = $_POST['deal_id'];
        $budget = $_POST['budget'];
        $re = Yii::$app->db->createCommand('UPDATE deals_maker SET budget="' . $budget  . '" WHERE id=' . $dealId )
            ->execute();
        if($re)
            echo json_encode(['msg'=>1]);
        else
            echo json_encode(['msg'=>0]);
    }

    public function actionCheckApprovedSku()
    {
        $connection = Yii::$app->db;
        $allow = 'yes';
        $params = $_POST;
        $startDate = date('Y-m-d', strtotime($params['start_date']));
        $endDate = date('Y-m-d', strtotime($params['end_date']));
        $channel = $params['channel'];
        $sku = $params['sku'];
        $query = "SELECT dm.id,dms.`sku_id`,dm.`name`,p.sku  FROM `deals_maker` dm
                INNER JOIN `deals_maker_skus` dms ON dms.`deals_maker_id` = dm.id 
                INNER JOIN channels c ON c.id = dm.`channel_id`
                INNER JOIN channels cn ON cn.id = '$channel'
                INNER JOIN products p ON p.id = dms.`sku_id`
                WHERE (('$startDate 00:00:00' >= dm.`start_date` AND '$startDate 00:00:00' <=  dm.`end_date`) OR ('$endDate 00:00:00' >= dm.`start_date` AND '$endDate 00:00:00' <= dm.`end_date`)  )
                AND dm.`status` = 'active' AND dms.`status` = 'approved'
                AND dms.sku_id = $sku AND c.`marketplace` = cn.`marketplace`";
        $command = $connection->createCommand($query);
        $result = $command->queryAll();
        $list = $head = "";

        foreach($result as $re)
        {
            $head = $re['sku'].' is overlapping in following Deals:<br/>';
            $list .= "- <a target='_blank' href='".Url::to('/deals-maker/update?id='.$re['id'].'&sku='.$re['sku_id'])."'>".$re['name']."</a><br/>";
        }
        echo json_encode(['msg' => $head.$list]);
    }

    public function actionAutoDealMaker(){
        $CallUtil=DealsUtil::makerAutoDeals();
    }

    public function actionImportDealSku($data,$Deal_Id){
        //die;
        //$this->debug($Deal_Id);
        $_POST['sku_id'] = $this->exchange_values('sku','id',$data['sku'],'products');
        $channel_id = $this->exchange_values('id','channel_id',$Deal_Id,'deals_maker');

        $Alread_exist = DealsMakerSkus::find()->where(['deals_maker_id'=>$Deal_Id,'sku_id'=>$_POST['sku_id']])->asArray()->all();

        //$statuses = [];
        if ($_POST['sku_id']=='false'){
            return ['SkuNotFoundInEzCommerce'=>$data['sku']];
        }
        else if(!empty($Alread_exist))
        {
            $Deal_maker_sku_id = $Alread_exist[0]['id'];
            $data['price'];
            $data['subsidy'];
            $data['qty'];

            //$params['sku_id'] = $_POST['sku_id'];
            //$this->debug($_POST);
            //$params['channel_id'] = $_POST['channel'];

            //$values = $this->CalculateDealPricing($_POST['sku_id'],$_POST['DealsMaker']['channel_id'],$data['price'],$data['subsidy'],$data['qty'],1);
            $_POST['price'] = $data['price'];
            $_POST['subsidy'] = $data['subsidy'];
            $_POST['qty'] = $data['qty'];
            $_POST['calculate_in_form'] = false;
            $_POST['channel'] = $channel_id;
            //$this->debug($data);
            $values = self::CalculateDealPricing($_POST['sku_id'],$_POST['channel'],$_POST['price'],$_POST['subsidy'],$_POST['qty'],true);
            //echo $values;die;
            //$this->debug($values);
            $values = json_decode($values,true);
            //$this->debug($values);
            if ( !empty($values) ){

                $Insert_Skus = DealsMakerSkus::findOne($Deal_maker_sku_id);

                $Insert_Skus->deal_price=$data['price'];
                $Insert_Skus->deal_subsidy= floatval($data['subsidy']);
                $Insert_Skus->deal_target=$data['qty'];

                //$this->debug($values);

                if (strpos($values['sales_margins'], '%') !== false) {
                    $Margin = str_replace('%','',$values['sales_margins']);
                }else{
                    $Margin = $values['sales_margins'];
                }


                $Insert_Skus->deal_margin=(double)$Margin;
                $sales_margins_rm = str_replace('RM ','',$values['sales_margins_rm']);
                $sales_margins_rm = str_replace(',','',$sales_margins_rm);
                $Insert_Skus->deal_margin_rm=(double) $sales_margins_rm;
                //$this->debug($values);
                $Insert_Skus->total_stocks = (string)$values['stocks']['total_stocks'];

                $Insert_Skus->update();
                if ( !isset($_POST['DM']) ){
                    //$this->debug($data);
                    $_POST['DM']['s_'.$_POST['sku_id']] = ['sku'=>$data['sku'],'price'=>$data['price'],'subsidy'=>floatval($data['subsidy']),'qty'=>$data['qty'],
                        'margin_per' => $Margin,'margin_rm'=>str_replace('RM ','',$values['sales_margins_rm']),'reason'=>''
                    ];
                }
                //$this->debug($_POST);
                if (!empty($Insert_Skus->errors))
                    $this->debug($Insert_Skus->errors);
                if (!empty($Insert_Skus->errors))
                    return ['DbErrors'=>$Insert_Skus->errors];
                else
                    return ['SuccessFullyUpdated'=>$data['sku']];
            }else{
                return ['ErrorInGettingMargin'=>$data['sku']];
            }
        }
        else
        {

            $_POST['channel'] = $_POST['DealsMaker']['channel_id'];
            $_POST['price'] = $data['price'];
            $_POST['subsidy'] = $data['subsidy'];
            $_POST['qty'] = $data['qty'];
       //     $this->debug($_POST);
            $params['sku_id'] = $_POST['sku_id'];
            $params['channel_id'] = $_POST['channel'];
            $params['price_sell'] = $_POST['price'];

            $params['subsidy'] = $_POST['subsidy'];
            $params['qty'] = $_POST['qty'];

            $values = self::CalculateDealPricing($params['sku_id'],$params['channel_id'],$params['price_sell'],$params['subsidy'],$params['qty'],true);
            $values = json_decode($values,1);
            //$this->debug($values);
            if ( !empty($values) ){
                $Insert_Skus = new DealsMakerSkus();
                $Insert_Skus->sku_id=$_POST['sku_id'];
                $Insert_Skus->deals_maker_id=$Deal_Id;
                $Insert_Skus->sku = $values['sku'];
                $Insert_Skus->deal_price=$_POST['price'];
                $Insert_Skus->deal_subsidy= floatval($_POST['subsidy']);
                $Insert_Skus->deal_target=$_POST['qty'];
                $Insert_Skus->total_stocks = !is_array($values['stocks']['total_stocks']) ? (string)$values['stocks']['total_stocks'] : '0';
                $Status='Pending';
                $Insert_Skus->approval_comments='';
                $Insert_Skus->deal_margin= (float)$values['sales_margins'];
                $Insert_Skus->deal_margin_rm= (float) $values['sales_margins_rm'];
                $Insert_Skus->requestor_reason='Others';
                $Insert_Skus->status=$Status;
                $Insert_Skus->save();
                if ($Insert_Skus->errors){
                    $this->debug($Insert_Skus->errors);
                }
                if ( !isset($_POST['DM']) ){
                    $_POST['DM']['s_'.$_POST['sku_id']] = ['sku'=>$data['sku'],'price'=>$_POST['price'],'subsidy'=>floatval($_POST['subsidy']),'qty'=>$_POST['qty'],
                        'margin_per' => $values['sales_margins'],'margin_rm'=>str_replace('RM ','',$values['sales_margins_rm']),'reason'=>''
                    ];
                }
                //$this->debug($_POST);
                if (!empty($Insert_Skus->errors))
                    $this->debug($Insert_Skus->errors);
                if (!empty($Insert_Skus->errors))
                    return ['DbErrors'=>$Insert_Skus->errors];
                else
                    return ['SuccessFullyAdded'=>$data['sku']];
            }else{
                return ['ErrorInGettingMargin'=>$data['sku']];
            }

            //die;

        }
    }

    public function actionImportDealsSkus(){
        $data='[]';
        $Lazada_Import_List=json_decode($data);
        //$this->debug($Lazada_Import_List);
        LazadaImporSkus::deleteAll();
        foreach ( $Lazada_Import_List as $val ){
            $insert=new LazadaImporSkus();
            $insert->sku = $val->sku;
            $insert->price=$val->price;
            $insert->qty=$val->qty;
            $insert->subsidy=$val->subsidy;
            $insert->save();
            if (!empty($insert->errors))
                $this->debug($insert->errors);
        }
        $Lazada_Import_List = LazadaImporSkus::find()->asArray()->all();
        //$this->debug($Lazada_Import_List);
        foreach ($Lazada_Import_List as $value){

            //$this->debug($value);
            $_POST['sku_id'] = $this->exchange_values('sku','id',$value['sku'],'products');
            $Alread_exist = DealsMakerSkus::find()->where(['deals_maker_id'=>500,'sku_id'=>$_POST['sku_id']])->asArray()->all();
            if (!empty($Alread_exist))
                continue;
            $_POST['channel'] = 2;
            $_POST['price'] = $value['price'];
            $_POST['subsidy'] = $value['subsidy'];
            $_POST['qty'] = $value['qty'];
            $_POST['fbl'] = '0';

            $params['sku_id'] = $_POST['sku_id'];
            $params['channel_id'] = $_POST['channel'];
            $params['price_sell'] = $_POST['price'];

            $params['subsidy'] = $_POST['subsidy'];
            $params['qty'] = $_POST['qty'];

            $is_fbl = 0;
            // calculate shipping cost and get fbl
            $stock = HelpUtil::getFblStock($params['sku_id'],$params['channel_id']);
            if($stock > 0 && $stock >= $params['qty'])
            {
                $is_fbl = 1;
            }
            $params['fbl'] = $is_fbl;

            $values = HelpUtil::getSkuInfo($params,true,true);

            if (!isset($values['sales_margins']))
                continue;
            $Insert_Skus = new DealsMakerSkus();
            $Insert_Skus->sku_id=$_POST['sku_id'];
            $Insert_Skus->deals_maker_id=500;
            $Insert_Skus->deal_price=$_POST['price'];
            $Insert_Skus->deal_subsidy= floatval($_POST['subsidy']);
            $Insert_Skus->deal_target=$_POST['qty'];
            $Margin = str_replace('%','',$values['sales_margins']);
            if ($Margin>=5){
                $Status='Approved';
                $Insert_Skus->approval_comments='auto approve by system';
            }
            else
                $Status='Pending';
            $Insert_Skus->deal_margin=$Margin;
            $Insert_Skus->deal_margin_rm=str_replace('RM ','',$values['sales_margins_rm']);
            $Insert_Skus->requestor_reason='Others';
            $Insert_Skus->status=$Status;
            /*$Insert_Skus->approval_id=2;
            $Insert_Skus->status='Pending';
            $Insert_Skus->approval_comments='12.12 deal';*/
            $Insert_Skus->save();
            if (!empty($Insert_Skus->errors))
                $this->debug($Insert_Skus->errors);
            //die;
        }

    }

    public function exchange_values($from, $to, $value, $table)
    {
        $connection = \Yii::$app->db;
        $get_all_data_about_detail = $connection->createCommand("select " . $to . " from " . $table . " where " . $from . " ='" . $value . "'");
        $result_data = $get_all_data_about_detail->queryAll();
        //return $result_data[0][$to];
        if (isset($result_data[0][$to])) {
            return $result_data[0][$to];
        } else {
            return 'false';
        }
    }

    /*
     * Deals Maker details Export functionality
     *
     */
    public function actionExport()
    {

        $this->layout = false;
        $did = Yii::$app->request->get('did');
        $dmObj = DealsMaker::find()->where(['id' => $did])->one();
        $filename = str_replace(' ','',$dmObj->name);

        Yii::$app->response->format = Yii\web\Response::FORMAT_RAW;

        $headers = Yii::$app->response->headers;
        $headers->add('Content-Description', 'File Transfer');
        $headers->add('Content-type', 'application/msexcel; charset=utf-8');
        $headers->add('Content-Disposition', 'attachment;Filename=' . $filename . '.xls');

        $multiSkus = $dmObj->requestedSkus;

        return $this->render('_print_dm', ['multiSkus' => $multiSkus,'dm'=>$dmObj]);
    }

    /*
     * Load active SKUS based on shop and category
     * by default category is ALL
     */
    public function actionLoadSkusByShop()
    {
        $data=\Yii::$app->request->post();
        //$this->debug($data);
        $shop = $data['channel'];
        $category = (isset($data['category'])) ? $data['category'] : [];
        //get platform 1st
        $skus = DealsUtil::getActiveSkus($category,$shop,$data['additionalSkus']);
        //$this->debug($skus);
        //die;
        //$this->debug($skus);
        if ( $_POST['discount_type']!='' && $_POST['discount']!='' ){

            foreach ( $skus as $key=>$skuDetail ){

                if ($skuDetail['cost']==0)
                    continue;


                if ( $_POST['discount_type']=='Percentage' ){

                    $dealPrice = $skuDetail['cost'] - (($skuDetail['cost'] * $_POST['discount']) / 100);

                }else if ($_POST['discount_type']=='Amount'){
                    $dealPrice = ($skuDetail['cost'] - $_POST['discount']);
                }
                $response = $this->CalculateDealPricing($skuDetail['sku_id'],$_POST['channel'],$dealPrice,0,1,1);
                $response = json_decode($response,true);
                //echo '<pre>';
                //print_r($response);
                //$this->debug($response);

                $skus[$key]['subsidy'] = 0;
                $skus[$key]['deal_price'] = number_format($dealPrice,2,'.','');
                $skus[$key]['sales_target'] = '';
                $skus[$key]['margin_percentage'] = $response['sales_margins'];
                $skus[$key]['sales_margins_rm'] = $response['sales_margins_rm'];
                $skus[$key]['total_stocks'] = (isset($response['stocks']['total_stocks']['message'])) ? 0 : $response['stocks']['total_stocks'];
            }
        }
        //$this->debug($skus);
        $skuList=DealsUtil::_refineList($skus);
        $discount_type = (isset($_POST['discount_type'])) ? $_POST['discount_type'] : '';
        $final_skus=[];
       // self::debug($skus);
        foreach ( $skus as $val ){
            if (isset($data['category']) && is_array($data['category']) ){
                //echo 'helloworld';die;
                //$this->debug($val);
               // $val['sub_category']=rand(1,10);
                $parent_cat = $this->ChildCategoryToParent($val['sub_category']);
                if ( in_array($parent_cat, $data['category']) ){
                    $val['form_cat'] = $parent_cat;
                }
            }
            $final_skus[] = $val;
        }
        //echo '<pre>';print_r($data);
        //$this->debug($final_skus);
        $html= $this->renderPartial('_shop_skus', [
            'skus' => $final_skus,
            'discount_type'=>$discount_type,
            'additionalSkus'=>(is_array($data['additionalSkus'])=='array') ? $data['additionalSkus'] : []
            ]
        );
        return json_encode(['content'=>$html,'skuList'=>$skuList]);
    }
    public function actionCloneCsv(){
        $deal_id = $_GET['deal_id'];
        $Sql = "SELECT p.sku,dms.deal_price AS price,dms.deal_target AS qty,dms.deal_subsidy AS subsidy
                FROM deals_maker_skus dms
                INNER JOIN products p ON p.id = dms.sku_id
                WHERE dms.deals_maker_id = ".$deal_id;
        //echo $Sql;die;
        $Deal_Sku_Data = DealsMakerSkus::findBySql($Sql)->asArray()->all();
        $this->export_csv($Deal_Sku_Data,'Clone-Deal-'.$deal_id.'-'.date('Y-m-d'));
    }
    public function actionGetLazadaOrders(){
        $Orders = LazadaUtil::GetOrders(1);
        $OrderItemsList = [];
        foreach ($Orders as $value){
            $OrderNumber = number_format($value['order_number'],0,'','');
            $OrderItem = LazadaUtil::GetOrderItems(1,$OrderNumber);

            foreach ( $OrderItem['data'] as $val ){
                if ($val['shipping_type']=='Dropshipping') {
                    if (isset($OrderItemsList[$val['sku']][$val['status']]))
                        $OrderItemsList[$val['sku']][$val['status']] += 1;
                    else
                        $OrderItemsList[$val['sku']][$val['status']] = 1;
                }
            }
        }
        return $OrderItemsList;
    }
    public function actionCurrentStock(){
        $OrderItems = $this->actionGetLazadaOrders();
        $AllProductsLazadaBlip = LazadaUtil::GetAllProducts(1,'all');
        //$this->debug($AllProductsLazadaBlip);
        $Products  = [];
        foreach ( $AllProductsLazadaBlip as $value ){
            $Products[$value['SellerSku']]['BlipStock'] = $value['quantity'];
        }
        $isisStock = json_decode(Settings::find()->where(['name'=>'isis_products'])->asArray()->all()[0]['value'],true);
        foreach ( $isisStock as $value ){
            if ($value['skuStatus']=='ACTIVE'){
                $Products[$value['storageClientSkuNo']]['isis_stock'] = $value['availableQty'];
            }
        }


        foreach ($OrderItems as $key=>$value){
            if (isset($Products[$key])){
                $Products[$key]['Orders'][] = $value;
            }
        }

        return $this->render('temp-stock-orders-match',['Data'=>$Products]);
    }
    public function actionTncCorrect(){
        $GetPODetails = PoDetails::findBySql("SELECT * FROM `po_details` pod WHERE pod.`nc12` LIKE '%+%';")->asArray()->all();
        foreach ( $GetPODetails as $key=>$value ){
            $GetPD = PoDetails::findOne($value['id']);
            $GetPD->nc12 = number_format($value['nc12'],0,'','');
            //$this->debug($GetPD);
            $GetPD->update();
        }
    }
    public function actionTncProductDetailNumber(){
        $GetPODetails = PoDetails::findBySql("SELECT * FROM `product_details` pd WHERE pd.`nc12` LIKE '%+%';")->asArray()->all();
        foreach ( $GetPODetails as $key=>$value ){
            $GetPD = ProductDetails::findOne($value['id']);
            $GetPD->nc12 = number_format($value['nc12'],0,'','');
            //$this->debug($GetPD);
            $GetPD->update();
        }
    }
    public function actionGetChannelAvailableSkus(){
        $channelId = $_POST['channel_id'];
        return $this->GetChannelSkus($channelId);
    }
    public function GetChannelSkus($channelid, $skuList=[]){
        $channelId = $channelid;
        $skus = DealsUtil::GetShopSkus($channelId,$skuList);
        $options = DealsUtil::MakeDropdownOptions($skus,'product_id','channel_sku');
        return $options;
    }
    public function actionGetMarketplace(){
        $channelId = $_POST['channel_id'];
        $channel = Channels::find()->where(['id'=>$channelId])->one();
        return $channel->marketplace;
    }

    public function actionShopeeDiscountListDropdown(){

        $discountListDropdown = DealsUtil::GetShopeeDiscountListDropdown($_POST['channel_id']);
        return $discountListDropdown;
        //$this->debug($discountListDropdown);
    }
    public function actionApplyPercentage(){
        $sku_detail = Products::find()->where(['id'=>$_POST['sku_id']])->one();
        $dealPrice = $sku_detail->cost - (($sku_detail->cost * $_POST['discount']) / 100);
        return json_encode(['deal_price'=>number_format($dealPrice,2,'.','')]);
    }

}
